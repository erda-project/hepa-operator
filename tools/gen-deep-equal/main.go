// Copyright (c) 2022 Terminus, Inc.
//
// This program is free software: you can use, redistribute, and/or modify
// it under the terms of the GNU Affero General Public License, version 3
// or later ("AGPL"), as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"io/fs"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"text/template"
)

const Template = `// Generated by hapi-operator tools

// Copyright (c) 2022 Terminus, Inc.
//
// This program is free software: you can use, redistribute, and/or modify
// it under the terms of the GNU Affero General Public License, version 3
// or later ("AGPL"), as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

package {{.Package}}

import (
	"reflect"
	"strings"

	"k8s.io/apimachinery/pkg/api/equality"
)

{{range $i, $name := .Structs}}
func (in {{$name}}) DeepEqual(i interface{}) ([]string, bool) {
	var v {{$name}}
	switch t := i.(type) {
	case nil:
		return []string{"(invalid)"}, false
	case {{$name}}:
		v = t
	case *{{$name}}:
		if t == nil {
			return []string{"(invalid)"}, false
		}
		v = *t
	default:
		return []string{"(invalid)"}, false
	}

	v1 := reflect.ValueOf(in)
	t1 := reflect.TypeOf(in)
	v2 := reflect.ValueOf(v)
	for i := 0; i < v1.NumField(); i++ {
		if !v1.Field(i).IsValid() && !v2.Field(i).IsValid() {
			continue
		}
		if !v1.Field(i).IsValid() || !v2.Field(i).IsValid() {
			return getTag(t1.Field(i)), false
		}

		if de, ok := v1.Field(i).Interface().(interface {
			DeepEqual(interface{}) ([]string, bool)
		}); ok {
			if field, ok := de.DeepEqual(v2.Field(i).Interface()); !ok {
				return append(getTag(t1.Field(i)), field...), ok
			}
			continue
		}
		if ok := equality.Semantic.DeepEqual(v1.Field(i).Interface(), v2.Field(i).Interface()); !ok {
			return getTag(t1.Field(i)), false
		}
	}
	return nil, true
}
{{end}}
func getTag(field reflect.StructField) []string {
	jTag := field.Tag.Get("json")
	if jTag != "" {
		return []string{strings.Split(jTag, ",")[0]}
	}
	if strings.HasPrefix(jTag, ",inline") {
		return nil
	}
	return []string{field.Name}
}
`

type DeepEqualTemplateValue struct {
	Package string   `json:"package"`
	Structs []string `json:"structs"`
}

func (v *DeepEqualTemplateValue) Visit(node ast.Node) ast.Visitor {
	switch t := node.(type) {
	case *ast.File:
		return v
	case *ast.GenDecl:
		if t.Tok == token.TYPE {
			return v
		}
	case *ast.TypeSpec:
		if _, ok := t.Type.(*ast.StructType); ok {
			if name := []rune(t.Name.String()); name[0] >= 'A' && name[0] <= 'Z' {
				v.Structs = append(v.Structs, t.Name.String())
			}
		}
	default:
		return nil
	}
	return nil
}

func Gen(dir string) {
	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, dir, func(fi fs.FileInfo) bool {
		return strings.HasSuffix(fi.Name(), ".go") && !strings.HasSuffix(fi.Name(), "_test.go")
	}, 0)
	if err != nil {
		fmt.Println("failed to ParseDir:", err)
		os.Exit(1)
	}
	if len(pkgs) == 0 {
		fmt.Printf("no package in %s", dir)
		return
	}
	if len(pkgs) > 1 {
		fmt.Printf("more than 1 packages in %s", dir)
		os.Exit(1)
	}
	var value DeepEqualTemplateValue
	for _, pkg := range pkgs {
		value.Package = pkg.Name
		for _, file := range pkg.Files {
			ast.Walk(&value, file)
		}
	}
	sort.Strings(value.Structs)

	t, err := template.New("test").Parse(Template)
	if err != nil {
		fmt.Println("failed to parse", err)
		os.Exit(1)
	}
	file, err := os.OpenFile(filepath.Join(dir, "zz_generated.deepequal.go"), os.O_CREATE|os.O_TRUNC|os.O_RDWR, 0644)
	if err != nil {
		fmt.Println("failed to openfile", err)
		os.Exit(1)
	}
	if err = t.Execute(file, value); err != nil {
		fmt.Println("failed to Execute", err)
		os.Exit(1)
	}
}

func main() {
	for _, arg := range os.Args {
		if strings.HasPrefix(arg, "apipkg=") {
			arg = strings.TrimPrefix(arg, "apipkg=")
			dirs := strings.Split(arg, ",")
			for _, dir := range dirs {
				Gen(dir)
			}
			return
		}
	}
}
